# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe DatasetsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Dataset. As you add validations to Dataset, be sure to
  # adjust the attributes here as well.
  def valid_attributes
    {
      name: 'Property Assessment',
      year: 2017,
      resource: '9a4b1173-89ac-4a01-93e7-661eeb81ba16'
    }
  end

  def invalid_attributes
    {
      name: 4,
      year: 'i am not a number',
      resource: ['a', 'b', 'c', 1, 2, 3]
    }
  end

  after(:all) do
    Visualization.delete_all
    Dataset.delete_all
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # DatasetsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'assigns all datasets as @datasets' do
      dataset = Dataset.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:datasets)).to eq([dataset])
    end
  end

  describe 'GET #show' do
    it 'assigns the requested dataset as @dataset' do
      dataset = Dataset.create! valid_attributes
      get :show, params: { id: dataset.to_param }, session: valid_session
      expect(assigns(:dataset)).to eq(dataset)
    end
  end

  xdescribe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Dataset' do
        expect {
          post :create, params: { dataset: valid_attributes }, session: valid_session
        }.to change(Dataset, :count).by(1)
      end

      it 'assigns a newly created dataset as @dataset' do
        post :create, params: { dataset: valid_attributes }, session: valid_session
        expect(assigns(:dataset)).to be_a(Dataset)
        expect(assigns(:dataset)).to be_persisted
      end

      it 'redirects to the created dataset' do
        post :create, params: {dataset: valid_attributes}, session: valid_session
        expect(response).to redirect_to(Dataset.last)
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved dataset as @dataset' do
        post :create, params: {dataset: invalid_attributes}, session: valid_session
        expect(assigns(:dataset)).to be_a_new(Dataset)
      end
    end
  end

  xdescribe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) {
        skip('Add a hash of attributes valid for your model')
      }

      it 'updates the requested dataset' do
        dataset = Dataset.create! valid_attributes
        put :update, params: {id: dataset.to_param, dataset: new_attributes}, session: valid_session
        dataset.reload
        skip('Add assertions for updated state')
      end

      it 'assigns the requested dataset as @dataset' do
        dataset = Dataset.create! valid_attributes
        put :update, params: {id: dataset.to_param, dataset: valid_attributes}, session: valid_session
        expect(assigns(:dataset)).to eq(dataset)
      end

      it 'redirects to the dataset' do
        dataset = Dataset.create! valid_attributes
        put :update, params: {id: dataset.to_param, dataset: valid_attributes}, session: valid_session
        expect(response).to redirect_to(dataset)
      end
    end

    context 'with invalid params' do
      it 'assigns the dataset as @dataset' do
        dataset = Dataset.create! valid_attributes
        put :update, params: {id: dataset.to_param, dataset: invalid_attributes}, session: valid_session
        expect(assigns(:dataset)).to eq(dataset)
      end
    end
  end

  xdescribe 'DELETE #destroy' do
    it 'destroys the requested dataset' do
      dataset = Dataset.create! valid_attributes
      expect {
        delete :destroy, params: {id: dataset.to_param}, session: valid_session
      }.to change(Dataset, :count).by(-1)
    end

    it 'redirects to the datasets list' do
      dataset = Dataset.create! valid_attributes
      delete :destroy, params: {id: dataset.to_param}, session: valid_session
      expect(response).to redirect_to(datasets_url)
    end
  end

end
